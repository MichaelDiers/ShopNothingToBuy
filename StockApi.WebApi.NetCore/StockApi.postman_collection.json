{
	"info": {
		"_postman_id": "d2c91dac-7778-43b8-88a2-dcb29b9eb989",
		"name": "StockApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST api/stocks",
			"item": [
				{
					"name": "Post api/stocks should fail if body is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// stop tests if ExpectedEnvironment and Environment do not match\r",
									"pm.environment.set(\"ExpectedEnvironment\", \"Local\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id is missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const inStock = 1000;\r",
									"\r",
									"const requestBody = { inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id is invalid (no guid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const inStock = 1000;\r",
									"\r",
									"const id = \"f72f0e1f-fe0c-426d-bf1f\"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if inStock is missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"\r",
									"const requestBody = { id };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if inStock is negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = -1;\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"// stop tests if ExpectedEnvironment and Environment do not match\r",
									"pm.environment.set(\"ExpectedEnvironment\", \"Local\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = 1000;\r",
									"\r",
									"pm.environment.set(\"Post.Id\", id);\r",
									"pm.environment.set(\"Post.InStock\", inStock);\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(201);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\"));\r",
									"\r",
									"    const location = postman.getResponseHeader(\"Location\");\r",
									"    pm.expect(location).not.to.be.null;\r",
									"    pm.environment.set(\"Location\", location);\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET for specified location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.Id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.inStock\"));    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Location}}",
							"host": [
								"{{Location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id already exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.environment.get(\"Post.Id\");\r",
									"const inStock = pm.environment.get(\"Post.InStock\");\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.not.be.withBody;\r",
									"    \r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}