{
	"info": {
		"_postman_id": "d2c91dac-7778-43b8-88a2-dcb29b9eb989",
		"name": "StockApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST api/stocks",
			"item": [
				{
					"name": "Route not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// stop tests if ExpectedEnvironment and Environment do not match\r",
									"pm.environment.set(\"ExpectedEnvironment\", \"Local\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    const responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.question).to.equal(\"Missed the intersection?\");\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/somewhere/over/the/ocean",
							"host": [
								"{{server}}"
							],
							"path": [
								"somewhere",
								"over",
								"the",
								"ocean"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if body is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id is missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const inStock = 1000;\r",
									"\r",
									"const requestBody = { inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id is invalid (no guid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const inStock = 1000;\r",
									"\r",
									"const id = \"f72f0e1f-fe0c-426d-bf1f\"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if inStock is missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"\r",
									"const requestBody = { id };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if inStock is negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = -1;\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = 1000;\r",
									"\r",
									"pm.environment.set(\"Post.Id\", id);\r",
									"pm.environment.set(\"Post.InStock\", inStock);\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(201);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\"));\r",
									"\r",
									"    const location = postman.getResponseHeader(\"Location\");\r",
									"    pm.expect(location).not.to.be.null;\r",
									"    pm.environment.set(\"Location\", location);\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET for specified location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\"));    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Location}}",
							"host": [
								"{{Location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks should fail if id already exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.environment.get(\"Post.Id\");\r",
									"const inStock = pm.environment.get(\"Post.InStock\");\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.not.be.withBody;\r",
									"    \r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks fails if api key missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = 1000;\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks fails if api key is invalid (no guid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = 1000;\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "653b6598-fffc-4426-a8eb-",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post api/stocks fails if api key is invalid (wrong api key)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"\r",
									"const id = uuid();\r",
									"const inStock = 1000;\r",
									"\r",
									"const requestBody = { id, inStock };\r",
									"pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "73b00828-f1a7-4d9d-b1dc-49b0338a6576",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET api/stocks/{id}",
			"item": [
				{
					"name": "Get api/stocks/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\"));    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    const responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.question).to.equal(\"Missed the intersection?\");\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/",
							"host": [
								"{{server}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail with unknown id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');\r",
									"pm.variables.set(\"id\", uuid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail with invalid id (no guid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    const responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.question).to.equal(\"Missed the intersection?\");\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');\r",
									"pm.variables.set(\"id\", uuid().substring(0, 10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail if api key is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"id\", pm.environment.get(\"Post.Id\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail if api key is invalid (no guid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"id\", pm.environment.get(\"Post.Id\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "73b00828-f1a7-4d9d-b1dc",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} should fail if api key is invalid (wrong api key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"id\", pm.environment.get(\"Post.Id\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "04690bf2-4af4-446e-9930-e82b8c5e6a0e",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT api/stocks/{id}/{delta}",
			"item": [
				{
					"name": "PUT api/stocks/{id}/{delta} (increment)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"Delta\", 10);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\") + pm.environment.get(\"Delta\"));\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/{{Delta}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"{{Delta}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} (increment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\") + pm.environment.get(\"Delta\"));    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} (no increment)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\") + pm.environment.get(\"Delta\"));\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/0",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} (no increment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(pm.environment.get(\"Post.InStock\") + pm.environment.get(\"Delta\"));    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} (set to zero)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"NewDelta\", - pm.environment.get(\"Post.InStock\") - pm.environment.get(\"Delta\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(0);\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/{{NewDelta}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"{{NewDelta}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} (check zero)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(0);    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} (set below zero)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(409);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(0);    \r",
									"    \r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/-10",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"-10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get api/stocks/{id} (recheck zero)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.Id\"));\r",
									"    pm.expect(responseJson.inStock).to.eql(0);    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} should fail for unknown id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"pm.variables.set(\"UnknownId\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{UnknownId}}/1000",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{UnknownId}}",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} should fail if api key is missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/1000",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} should fail if api key is invalid (no guid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require(\"uuid\");\r",
									"pm.variables.set(\"UnknownId\", uuid());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "8daa4708-5a7c-406a-9396-",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/1000",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT api/stocks/{id}/{delta} should fail if api key is invalid (wrong api key)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;\r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "a326e19e-9324-4b97-a434-6af5959bdfc3",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}/1000",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE /api/stocks/{id}",
			"item": [
				{
					"name": "DELETE /api/stocks/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail for unknown id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail for missing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    const responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.question).to.equal(\"Missed the intersection?\");    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}",
							"host": [
								"{{server}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail for invalid id (no guid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(404);\r",
									"    const responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.question).to.equal(\"Missed the intersection?\");    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"id\", pm.environment.get(\"Post.Id\").substring(0, 10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail without api key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail with invalid api key (no guid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "a326e19e-9324-4b97-a434",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/stocks/{id} should fail with invalid api key (wrong api key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "c76e6c29-ce60-4e67-bd2b-c43b0b098625",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/{{Post.Id}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"{{Post.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE /api/stocks/all",
			"item": [
				{
					"name": "{{server}}/all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/all",
							"host": [
								"{{server}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{server}}/all fails if api key is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/all",
							"host": [
								"{{server}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{server}}/all fails if api key is invalid (no guid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "04690bf2-4af4-446e-9930-",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/all",
							"host": [
								"{{server}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{server}}/all fails if api key is invalid (wrong api key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check response\", function () {\r",
									"    // do not execute if next request at any error\r",
									"    postman.setNextRequest(null);\r",
									"\r",
									"    // check the correct environment\r",
									"    pm.expect(pm.environment.get(\"environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
									"\r",
									"    // actual tests\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.not.be.withBody;    \r",
									"\r",
									"    // all tests passed, continue with next request\r",
									"    postman.setNextRequest();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "8daa4708-5a7c-406a-9396-13dba89b7e47",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}/all",
							"host": [
								"{{server}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "83becce3-952c-4c7f-9146-99c314a13a5f",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}