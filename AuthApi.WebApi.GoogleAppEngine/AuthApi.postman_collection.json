{
	"info": {
		"_postman_id": "f2f74b54-64d4-475f-8f76-e22e0bf0a3b7",
		"name": "AuthApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/auth",
			"item": [
				{
					"name": "POST (authenticate)",
					"item": [
						{
							"name": "Authenticate AuthServiceUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.environment.set(pm.environment.get(\"authServiceUser\") + \"Token\", \"Bearer \" + tokens.token);\r",
											"    pm.environment.set(pm.environment.get(\"authServiceUser\") + \"RefreshToken\", \"Bearer \" + tokens.refreshToken);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"{{authServiceUser}}\",\r\n    \"Password\": \"{{authServiceUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate AuthServiceReader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.environment.set(pm.environment.get(\"authServiceReader\") + \"Token\", \"Bearer \" + tokens.token);\r",
											"    pm.environment.set(pm.environment.get(\"authServiceReader\") + \"RefreshToken\", \"Bearer \" + tokens.refreshToken);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"{{authServiceReader}}\",\r\n    \"Password\": \"{{authServiceReaderPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate AuthServiceWriter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.environment.set(pm.environment.get(\"authServiceWriter\") + \"Token\", \"Bearer \" + tokens.token);\r",
											"    pm.environment.set(pm.environment.get(\"authServiceWriter\") + \"RefreshToken\", \"Bearer \" + tokens.refreshToken);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"{{authServiceWriter}}\",\r\n    \"Password\": \"{{authServiceWriterPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate AuthServiceAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.environment.set(pm.environment.get(\"authServiceAdmin\") + \"Token\", \"Bearer \" + tokens.token);\r",
											"    pm.environment.set(pm.environment.get(\"authServiceAdmin\") + \"RefreshToken\", \"Bearer \" + tokens.refreshToken);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"{{authServiceAdmin}}\",\r\n    \"Password\": \"{{authServiceAdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT (refresh token)",
					"item": [
						{
							"name": "Should fail for non refreshToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(pm.environment.get(\"authServiceAdmin\") + \"Token\");\r",
											"pm.request.headers.upsert({key: 'Authorization', value: token })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for refresh token 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(pm.environment.get(\"authServiceAdmin\") + \"RefreshToken\");\r",
											"pm.request.headers.upsert({key: 'Authorization', value: token })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.expect(tokens.token).not.be.null;\r",
											"    pm.expect(tokens.refreshToken).not.be.null;\r",
											"    \r",
											"    pm.environment.set(\"RefresherToken\", \"Bearer \" + tokens.refreshToken);\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for refresh token 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{RefresherToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.expect(tokens.token).not.be.null;\r",
											"    pm.expect(tokens.refreshToken).not.be.null;\r",
											"    \r",
											"    pm.environment.set(\"RefresherToken\", \"Bearer \" + tokens.refreshToken);\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for refresh token 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{RefresherToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.expect(tokens.token).not.be.null;\r",
											"    pm.expect(tokens.refreshToken).not.be.null;\r",
											"    \r",
											"    pm.environment.set(\"RefresherToken\", \"Bearer \" + tokens.refreshToken);\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for refresh token 4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{RefresherToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.expect(tokens.token).not.be.null;\r",
											"    pm.expect(tokens.refreshToken).not.be.null;\r",
											"    \r",
											"    pm.environment.set(\"RefresherToken\", \"Bearer \" + tokens.refreshToken);\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for refresh token 5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{RefresherToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    var tokens = pm.response.json();\r",
											"    pm.expect(tokens.token).not.be.null;\r",
											"    pm.expect(tokens.refreshToken).not.be.null;\r",
											"    \r",
											"    pm.environment.set(\"RefresherToken\", \"Bearer \" + tokens.refreshToken);\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for refresh token 6",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{RefresherToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail reusing refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    // if this fails: restart service to reinit the account => delete all test\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{server}}/api/auth",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/application",
			"item": [
				{
					"name": "POST (create application)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.environment.set(\"accountRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "39cc40dd-c306-4ed7-97a3-28aa2a3028b4",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail without token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.remove('Authorization');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail with empty token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail with invalid token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ghrwhgrghfg.457bfhjekqa.fgefg' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail body is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if role element is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {            \r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if roles element is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid()    \r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if application name is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if application name is too short",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {\r",
											"    \"Name\": \"MY\",\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if application name is too long",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {\r",
											"    \"Name\": \"123456789012345678901234567890123456789012345678901\",\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if role name if too short",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"MY\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if role name is too long",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"123456789012345678901234567890123456789012345678901\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail with user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											"\r",
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"        \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail with reader role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											"\r",
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"        \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.environment.set(\"accountRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.id).not.to.be.null;\r",
											"    responseJson.roles.forEach(role => {\r",
											"        pm.expect(role.id).not.to.be.null;\r",
											"    });\r",
											"    \r",
											"    pm.environment.set(\"Post.ApplicationId\", responseJson.id);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed with writer role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											"\r",
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"        \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed with admin role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											"\r",
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"        \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail with admin role using refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											"\r",
											"const uuid = require('uuid');\r",
											"\r",
											"const body = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"        \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET (read application)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "39cc40dd-c306-4ed7-97a3-28aa2a3028b4",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if application id is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.question).to.eql(\"Missed the intersection?\");\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if application id is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/notAGuid",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"notAGuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"Post.ApplicationId\"));\r",
											"    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;        \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for reader role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;        \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;        \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;        \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;        \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /all (read all applications)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "39cc40dd-c306-4ed7-97a3-28aa2a3028b4",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    const responseJson = pm.response.json();\r",
											"    let found = false;\r",
											"    let applicationId = pm.environment.get(\"Post.ApplicationId\");\r",
											"    responseJson.forEach((application) => {\r",
											"        if (application.id === applicationId)\r",
											"        {\r",
											"            found = true;\r",
											"        }\r",
											"    });\r",
											"\r",
											"    pm.expect(found).to.equal(true);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for reader role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE (delete application)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "39cc40dd-c306-4ed7-97a3-28aa2a3028b4",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if applicationId is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.question).to.eql(\"Missed the intersection?\");\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if applicationId is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/notAGuid",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"notAGuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if applicationId is unknown",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"pm.variables.set(\"UnknownApplicationId\", uuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{UnknownApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{UnknownApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should Succeed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should faill for user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should faill for reader role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin but 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin using refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/{{Post.ApplicationId}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"{{Post.ApplicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE (delete all applications)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "39cc40dd-c306-4ed7-97a3-28aa2a3028b4",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for reader role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for writer role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed with empty array",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.length).to.equal(0);    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application",
										"all"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/account",
			"item": [
				{
					"name": "POST (create account)",
					"item": [
						{
							"name": "Should create new application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"// stop tests if ExpectedEnvironment and Environment do not match\r",
											"pm.environment.set(\"ExpectedEnvironment\", \"Local\");\r",
											"\r",
											"const applicationRequest = {\r",
											"    \"Name\": \"My application\" + uuid(),\r",
											"    \"Roles\": [\r",
											"        {\r",
											"            \"Name\": \"user\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"service\"\r",
											"        },\r",
											"        {\r",
											"            \"Name\": \"admin\"\r",
											"        }\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(applicationRequest));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    \r",
											"    const responseJson = pm.response.json();    \r",
											"\r",
											"    const accountRequest = {\r",
											"        IsLocked: false,\r",
											"        Name: 'userName' + uuid(),\r",
											"        Password: \"mypassword\",\r",
											"        Claims: [\r",
											"            {\r",
											"                Type: responseJson.id,\r",
											"                Value: responseJson.roles[0].id,\r",
											"            },\r",
											"            {\r",
											"                Type: responseJson.id,\r",
											"                Value: responseJson.roles[1].id\r",
											"            }\r",
											"        ]        \r",
											"    };\r",
											"\r",
											"    pm.environment.set(\"envAccountPostRequest\", JSON.stringify(accountRequest));\r",
											"    pm.environment.set(\"envAccountPostRequest.Name\", accountRequest.Name);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/application",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if IsLocked is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"delete body.IsLocked;\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if IsLocked is not a bool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.IsLocked = \"notABool\";\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if Name is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"delete body.Name;\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if Name is too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.Name = '1234';\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if Name is too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.Name = '123456789012345678901234567890123456789012345678901';\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if password is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"delete body.Password;\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if password is too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.Password = \"1234567\";\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if password is too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.Password = \"123456789012345678901234567890123456789012345678901\";\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if claims is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"delete body.Claims;\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if Claims is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get(\"envAccountPostRequest\"));\r",
											"body.Claims = [];\r",
											"\r",
											"pm.variables.set(\"localRequest\", JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if account exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer but 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin but 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET (read account)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if account name if not set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.expect(pm.response.json().question).to.eql('Missed the intersection?');\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if account name is unknown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"pm.variables.set('localAccountName', uuid());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{localAccountName}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{localAccountName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"    const responseAccout = pm.response.json();\r",
											"    const expectedAccount = JSON.parse(pm.environment.get('envAccountPostRequest'));\r",
											"\r",
											"    pm.expect(responseAccout.isLocked).to.eql(expectedAccount.IsLocked);\r",
											"    pm.expect(responseAccout.name).to.eql(expectedAccount.Name);\r",
											"    pm.expect(responseAccout.claims.length).to.eql(expectedAccount.Claims.length);\r",
											"\r",
											"    const matchedAll = responseAccout.claims.every(responseClaim => {\r",
											"        return expectedAccount.Claims.some(expectedClaim => expectedClaim.Type === responseClaim.type && expectedClaim.Value == responseClaim.value);\r",
											"    });    \r",
											"\r",
											"    pm.expect(matchedAll).to.eql(true);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET (read all accounts)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{accountRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"\r",
											"    const responseAccounts = pm.response.json();\r",
											"    const expectedAccount = JSON.parse(pm.environment.get('envAccountPostRequest'));\r",
											"\r",
											"    let foundMatch = responseAccounts.some(responseAccout  => {\r",
											"        return responseAccout.isLocked === expectedAccount.IsLocked\r",
											"            && responseAccout.name === expectedAccount.Name\r",
											"            && responseAccout.claims.length === expectedAccount.Claims.length\r",
											"            && responseAccout.claims.every(responseClaim => {\r",
											"                return expectedAccount.Claims.some(expectedClaim => expectedClaim.Type == responseClaim.type && expectedClaim.Value === responseClaim.value);\r",
											"            });\r",
											"    });\r",
											"\r",
											"    pm.expect(foundMatch).to.eql(true);\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    \r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;    \r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT (update account)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const updateRequest = JSON.parse(pm.environment.get('envAccountPostRequest'));\r",
											"updateRequest.Password = updateRequest + \"1234\";\r",
											"updateRequest.IsLocked = true;\r",
											"pm.environment.set('envAccountPostRequestUpdate', JSON.stringify(updateRequest));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for unknown account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = JSON.parse(pm.environment.get('envAccountPostRequestUpdate'));\r",
											"body.Name += \"foobar\";\r",
											"pm.variables.set('localRequest', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{localRequest}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for writer role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{envAccountPostRequestUpdate}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE (delete account)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if account name is unknown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"pm.variables.set('localAccountName', uuid());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{localAccountName}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{localAccountName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for repeated deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for writer role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role but 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/{{envAccountPostRequest.Name}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"{{envAccountPostRequest.Name}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE (delete all accounts)",
					"item": [
						{
							"name": "Should fail if api key is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is not a guid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "notAGuid",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail if api key is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "808addc3-03c0-4030-9284-df078b39d536",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for user role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceReaderToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for reader role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceUserToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for writer role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceWriterToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should succeed for admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Should fail for admin role using refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check response\", function () {\r",
											"    // do not execute if next request at any error\r",
											"    postman.setNextRequest(null);\r",
											"\r",
											"    // check the correct environment\r",
											"    pm.expect(pm.environment.get(\"Environment\")).to.equal(pm.environment.get(\"ExpectedEnvironment\"));\r",
											"\r",
											"    // actual tests\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.not.be.withBody;\r",
											"\r",
											"    // all tests passed, continue with next request\r",
											"    postman.setNextRequest();\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.upsert({key: 'Authorization', value: '{{authServiceAdminRefreshToken}}' })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}/api/account/all",
									"host": [
										"{{server}}"
									],
									"path": [
										"api",
										"account",
										"all"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "14d47ec5-f556-480c-a130-1c6fcb9ebfb1",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({key: 'Authorization', value: '{{authServiceAdminToken}}' })",
					"pm.environment.set(\"ExpectedEnvironment\", \"Local\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}