{
	"info": {
		"_postman_id": "69593bd0-a6d5-4ae4-b167-d89626c8b64b",
		"name": "ProductsApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PostProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check response\", function () {\r",
							"    // do not execute if next request at any error\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    // check the correct environment\r",
							"    pm.expect(pm.environment.get(\"environment\")).to.equal(\"local\");\r",
							"\r",
							"    // actual tests\r",
							"    pm.response.to.have.status(201);\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.description).to.eql(pm.environment.get(\"PostProducts.Description\"));\r",
							"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"PostProducts.Name\"));\r",
							"    pm.expect(responseJson).to.have.property(\"id\");\r",
							"    pm.environment.set(\"PostProducts.Id\", responseJson.id);\r",
							"\r",
							"    const location = postman.getResponseHeader(\"Location\");\r",
							"    pm.sendRequest(location, (error, response) => {\r",
							"        pm.expect(error).to.be.null;\r",
							"        pm.expect(response).to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // all tests passed, continue with next request\r",
							"    postman.setNextRequest();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const generateRandomString = (prefix = \"\", length = 6, includeBlanks = false) => {\r",
							"    var result = prefix;\r",
							"    while (result.length < length) {\r",
							"        var next = Math.random().toString(20);\r",
							"        if (includeBlanks) {\r",
							"            next = next + \" \";\r",
							"        }\r",
							"\r",
							"        result += next;\r",
							"    }\r",
							"\r",
							"    return result.substr(0, length);\r",
							"}\r",
							"\r",
							"pm.environment.set(\"PostProducts.Name\", generateRandomString(\"Name_\", 30));\r",
							"pm.environment.set(\"PostProducts.Description\", generateRandomString(\"Description_\", 100, true));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    Description: \"{{PostProducts.Description}}\",\r\n    Name: \"{{PostProducts.Name}}\"\r\n}"
				},
				"url": {
					"raw": "{{server}}",
					"host": [
						"{{server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check response\", function () {\r",
							"    // do not execute if next request at any error\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    // check the correct environment\r",
							"    pm.expect(pm.environment.get(\"environment\")).to.equal(\"local\");\r",
							"\r",
							"    // actual tests\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"    pm.expect(responseJson).to.have.lengthOf.above(0);\r",
							"\r",
							"    // all tests passed, continue with next request\r",
							"    postman.setNextRequest();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}",
					"host": [
						"{{server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetProducts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check response\", function () {\r",
							"    // do not execute if next request at any error\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    // check the correct environment\r",
							"    pm.expect(pm.environment.get(\"environment\")).to.equal(\"local\");\r",
							"\r",
							"    // actual tests\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(pm.environment.get(\"PostProducts.Id\"));\r",
							"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"PostProducts.Name\"));\r",
							"    pm.expect(responseJson.description).to.eql(pm.environment.get(\"PostProducts.Description\"));\r",
							"\r",
							"    // all tests passed, continue with next request\r",
							"    postman.setNextRequest();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/{{PostProducts.Id}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"{{PostProducts.Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PutProducts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check response\", function () {\r",
							"    // do not execute if next request at any error\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    // check the correct environment\r",
							"    pm.expect(pm.environment.get(\"environment\")).to.equal(\"local\");\r",
							"\r",
							"    // actual tests\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    // all tests passed, continue with next request\r",
							"    postman.setNextRequest();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"PostProducts.Name\", \"Update \" + pm.environment.get(\"PostProducts.Name\"));\r",
							"pm.environment.set(\"PostProducts.Description\", \"Update \" + pm.environment.get(\"PostProducts.Description\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    Description: \"{{PostProducts.Description}}\",\r\n    Name: \"{{PostProducts.Name}}\",\r\n    Id: \"{{PostProducts.Id}}\",\r\n}"
				},
				"url": {
					"raw": "{{server}}",
					"host": [
						"{{server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteProducts/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check response\", function () {\r",
							"    // do not execute if next request at any error\r",
							"    postman.setNextRequest(null);\r",
							"\r",
							"    // check the correct environment\r",
							"    pm.expect(pm.environment.get(\"environment\")).to.equal(\"local\");\r",
							"\r",
							"    // actual tests\r",
							"    pm.response.to.have.status(204);\r",
							"\r",
							"    // all tests passed, continue with next request\r",
							"    postman.setNextRequest();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server}}/{{PostProducts.Id}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"{{PostProducts.Id}}"
					]
				}
			},
			"response": []
		}
	]
}